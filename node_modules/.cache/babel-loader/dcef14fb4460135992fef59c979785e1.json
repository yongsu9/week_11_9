{"ast":null,"code":"import { call, put } from \"redux-saga/effects\";\n\nfunction isPayloadAction(action) {\n  return action.payload !== undefined;\n}\n\nexport default function createAsyncSaga(asyncActionCreator, promiseCreator) {\n  return function* saga(action) {\n    try {\n      const result = isPayloadAction(action) ? yield call(promiseCreator, action.payload) : yield call(promiseCreator);\n      yield put(asyncActionCreator.success(result));\n    } catch (e) {\n      yield put(asyncActionCreator.failure(e));\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/yongs/react-tutorial/week_11_9/src/lib/createAsyncSaga.ts"],"names":["call","put","isPayloadAction","action","payload","undefined","createAsyncSaga","asyncActionCreator","promiseCreator","saga","result","success","e","failure"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;;AAOA,SAASC,eAAT,CAAyBC,MAAzB,EAA2E;AACvE,SAAOA,MAAM,CAACC,OAAP,KAAmBC,SAA1B;AACH;;AAED,eAAe,SAASC,eAAT,CACXC,kBADW,EAEXC,cAFW,EAGd;AACG,SAAO,UAAUC,IAAV,CAAeN,MAAf,EAAqE;AACxE,QAAI;AACA,YAAMO,MAAU,GAAGR,eAAe,CAACC,MAAD,CAAf,GAA0B,MAAMH,IAAI,CAACQ,cAAD,EAAiBL,MAAM,CAACC,OAAxB,CAApC,GAAuE,MAAMJ,IAAI,CAACQ,cAAD,CAApG;AACA,YAAMP,GAAG,CAACM,kBAAkB,CAACI,OAAnB,CAA2BD,MAA3B,CAAD,CAAT;AACH,KAHD,CAGE,OAAOE,CAAP,EAAU;AACR,YAAMX,GAAG,CAACM,kBAAkB,CAACM,OAAnB,CAA2BD,CAA3B,CAAD,CAAT;AACH;AACJ,GAPD;AAQH","sourcesContent":["import { call, put } from \"redux-saga/effects\";\r\nimport { AsyncActionCreatorBuilder, PayloadAction } from \"typesafe-actions\";\r\n\r\ntype PromiseCreatorFunction<P, T> = \r\n    ((payload: P) => Promise<T>) | \r\n    (() => Promise<T>);\r\n\r\nfunction isPayloadAction(action: any): action is PayloadAction<string,any> {\r\n    return action.payload !== undefined;\r\n}\r\n\r\nexport default function createAsyncSaga<T1,P1,T2,P2,T3,P3>(\r\n    asyncActionCreator: AsyncActionCreatorBuilder<[T1,[P1,undefined]],[T2,[P2,undefined]], [T3,[P3,undefined]]>,\r\n    promiseCreator: PromiseCreatorFunction<P1, P2>\r\n){\r\n    return function* saga(action: ReturnType<typeof asyncActionCreator.request>){\r\n        try {\r\n            const result: P2 = isPayloadAction(action) ? yield call(promiseCreator, action.payload) : yield call(promiseCreator);\r\n            yield put(asyncActionCreator.success(result));\r\n        } catch (e) {\r\n            yield put(asyncActionCreator.failure(e));\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}